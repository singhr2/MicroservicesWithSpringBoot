server.port=8012

#---------------------------------------------------------
# Configuration server related
#=========================================================
### spring.profiles.active=native, git

#         Option-A : using Native filesystem as backend
# (Mandatory) If using Native filesystem as backed for storing properties
spring.profiles.active=native

# specify folder name (no need to provide filename)
# Here, created one file config-server.properties where config-server is the spring.application.name
# Note /// in front of C:
spring.cloud.config.server.native.searchLocations=file:///C:/TEMP/NativeFilesystemProperties

#          Option-B : using Git as backend
#  (OPTIONAL) If using Git as backed for storing properties
# spring.profiles.active=git

#### spring.cloud.config.server.git.uri=https://github.com/singhr2/MicroservicesConfigurableProperties
#### spring.cloud.config.server.git.username=singhr2
# <WARNING> Ensure that Github password is not stored/ committed to Github </WARNING>
#### spring.cloud.config.server.git.password=
# on-demand vs on-startup(for faster startup)
#### spring.cloud.config.server.git.clone-on-start=true
#### spring.cloud.config.server.git.force-pull=true
#spring.cloud.config.server.git.searchPaths=
# time, in seconds, that the configuration server will wait to acquire an HTTP connection.
#spring.cloud.config.server.git.timeout=4

# TODO Check if mandatory to set
# Flag to indicate that the external properties should override system properties (Default true)
spring.cloud.config.override-system-properties=false


# =========================================================================
#               Spring Cloud Bus related
# =========================================================================
# Starting with Spring Boot 2, actuator endpoints are not exposed by default.
# To make them available for access, we need to add this in an application.yml
#
# this will enable /bus-refresh actuator endpoint on config-server
# and we can send HTTP POST request to trigger properties refresh
### management.endpoints.web.exposure.include=bus-refresh
management.endpoints.web.exposure.include=*
### management.endpoints.web.exposure.include=bus-env





#-------------------------------------------------------------
#       SPRING CLOUD BUS RELATED (RabbitMQ)
#-------------------------------------------------------------
# ***** RabbitMQ settings *****
### spring.rabbitmq.host = localhost
### spring.rabbitmq.port = 15672
## WARNING : change password for security reason
### spring.rabbitmq.username = guest
### spring.rabbitmq.password = guest

#       ??? is it required
# By default, all sensitive endpoints added by actuator are secured.
# This includes ‘/refresh' endpoint.
# For simplicity, we will turn off security by updating bootstrap.properties:
#management.security.enabled=false

# - Message Broker (e.g. RabbitMQ or Apache Kafka)
#-------------------------------------------------------------
#       SPRING CLOUD BUS RELATED (Apache Kafka)
#-------------------------------------------------------------
spring.cloud.bus.enabled=true
spring.kafka.bootstrap-servers=${KAFKA_ADDR:http://localhost:9092}

#           (EXPERIMENTAL)
# Group-id not able to set, client-id is set correctly
# spring.kafka.consumer.group-id=ConfigChange-Consumer-Group
spring.kafka.consumer.groupid=ConfigChange-Consumer-Group
spring.kafka.consumer.clientId=${spring.application.name}

# 'earliest' means that the consumers will start reading messages
# from the earliest one available when there is no existing offset for that consumer.
### spring.kafka.consumer.auto-offset-reset=earliest


# =========================================================================
#               logging specific settings
# =========================================================================
logging.level.root=info
logging.pattern.console=%black(%d{yy-MM-dd HH:mm:ss}) %highlight(%-5level) [%blue(%t)] %yellow(%-40.40logger{20}): %msg%n%throwable

# =========================================================================
#               service discovery (eureka) specific settings
# =========================================================================
eureka.client.serviceUrl.defaultZone=${EUREKA_URI:http://localhost:8761/eureka}
# eureka.instance.hostname=${spring.application.name}
# eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
eureka.instance.preferIpAddress=true
# eureka.client.register-with-eureka=true
# eureka.client.fetch-registry=true

