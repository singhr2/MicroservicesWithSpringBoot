# port on which this application will be running
# We can let Spring Boot choose a random port for us because later
# we are accessing this service with its name.
# 0 indicates we want random port number; helpful in case of multiple instances
#----------------------------------------------
server.port=${PORT_NO:0}


# fully qualified Eureka Server URL
# "defaultZone" is a magic string fallback value that provides the service URL for any client
# that doesn’t express a preference (i.e. it’s a useful default).
#----------------------------------------------
#eureka.client.serviceUrl.defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
eureka.client.serviceUrl.defaultZone=${EUREKA_URI:http://localhost:8761/eureka}

# When we set server.port=0 , and multiple instances of same service is started
# Eureka dashboard will shown only 1 instance.
# With the below metadata, and multiple service instances deployed on localhost,
# the random value will kick in there to make the instance unique.
# Note: Either instance_id or random.value are used, notice }} at the end
#----------------------------------------------
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}


# true = Eureka client is instructed to register itself upon start up
#----------------------------------------------
# eureka.client.register-with-eureka=true


# false = not to search for other registry nodes to connect to,
# as there are none (at least not while running locally )
#----------------------------------------------
# eureka.client.fetch-registry=true


# Eureka allows custom HealthCheckHandlers to be plugged-in through theEurekaClient#registerHealthCheck() API.
# Spring Cloud leverages this extension point to register a new handler
# - EurekaHealthCheckHandler - if the following property is set to true
#----------------------------------------------
# eureka.client.healthcheck.enabled=true


#
#----------------------------------------------
# eureka.client.lease.duration=5


# In some cases, it is preferable for Eureka to advertise the IP addresses of services
# rather than the hostname.
# Set eureka.instance.preferIpAddress to true and,
# when the application registers with eureka, it uses its IP address rather than its hostname.
#----------------------------------------------
##eureka.instance.preferIpAddress: true
eureka.instance.preferIpAddress=true

#  Registration takes up to 30 s because that is the default client refresh time
#----------------------------------------------
# eureka.instance.leaseRenewalIntervalInSeconds=1


#
#----------------------------------------------
# eureka.instance.leaseExpirationDurationInSeconds=2


# to allow restart and redeploy when changes are made in code.
#----------------------------------------------
spring.devtools.restart.enabled=true


# The monitored classpath directories are now polled every 2 seconds for changes,
# and a 1 second quiet period is maintained to make sure there are no additional class changes.
#----------------------------------------------
# spring.devtools.restart.poll-interval=2s
# spring.devtools.restart.quiet-period=1s


# =========================================================================
#               management/actuator specific settings
# =========================================================================

# disable the spring security on the management endpoints like /env, /refresh etc.
### management.security.enabled: false

# Include all endpoints (enpoints are enabled but not exposed)
# health and info endpoints by default,
# we need to POST  '/refresh' to refresh changed property values on selected instance
# bus-refresh : ?
management.endpoints.web.exposure.include=*

# Exclude specifics
### management.endpoints.web.exposure.exclude=env


# =========================================================================
#               logging specific settings
# =========================================================================


#
#----------------------------------------------
# logging.level.com.github.singhr2.services.user=INFO


#logging.path=logs
#logging.file=${logging.path}/log.log

#logging.level.root=info
# logging.level.root=debug
logging.level.root=info

#Colourful pattern
#logging.pattern.console=%black(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%-40.40logger{20}): %msg%n%throwable
# changed date from ISO8601
logging.pattern.console=%black(%d{yy-MM-dd HH:mm:ss}) %highlight(%-5level) [%blue(%t)] %yellow(%-40.40logger{20}): %msg%n%throwable

# =========================================================================
#               H2 database specific settings
# =========================================================================

# Auto-configure H2 database browser-based console
# By default, the console view of H2 database is disabled.
#------------------------------------------------
spring.h2.console.enabled=true

# allow other computers to connect.
# false= disable remote access
#------------------------------------------------
spring.h2.console.settings.web-allow-others=true


# !!!  EXPERIMENTAL !!!!!!!!!!!!!!!!
# spring.h2.console.path=/h2_console
spring.datasource.url=jdbc:h2:~/test
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# ===============================
# JPA / HIBERNATE
# ===============================

spring.jpa.show-sql=true
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect


# =========================================================================
#        Authentication and Authorization related
# =========================================================================

# <Note>
# We have moved these properties to private git repo as well.
# those will get preference as compared to values mentioned here.
# These are custom properties Used in the code to control access to service and JWT token
zuul.gateway.ip=192.168.1.5

# This value should be same in Zuul module as well as Users Module
jwt.token.secret=SVqB4JcUD6lsfvqMr-OKUNUphdNn64Eay60978ZlL74

# no. of minutes
jwt.token.valid.duration=120

jwt.token.header.name=Authorization

#prefix has 'space at the end' to separate the value of JWT Token
jwt.token.header.value.prefix=Bearer 


#-------------------------------------------------------------
#       SPRING CLOUD BUS RELATED
#-------------------------------------------------------------
### spring.rabbitmq.host = localhost
### spring.rabbitmq.port = 15672
## WARNING : change password for security reason
### spring.rabbitmq.username = guest
### spring.rabbitmq.password = guest

#-------------------------------------------------------------
#       SPRING CLOUD BUS with Apache Kafka (Client config)
#-------------------------------------------------------------
spring.cloud.bus.refresh.enabled=true
spring.cloud.bus.env.enabled=true
#endpoints.spring.cloud.bus.refresh.enabled=true
#endpoints.spring.cloud.bus.env.enabled=true
spring.cloud.stream.kafka.binder.autoAddPartitions=true
spring.kafka.bootstrap-servers=${KAFKA_ADDR:http://localhost:9092}

#spring.cloud.config.fail-fast=true
#spring.cloud.config.retry.max-attempts=20
#spring.cloud.config.retry.max-interval=15000
#spring.cloud.config.retry.initial-interval=10000



#-------------------------------------------------------------
#       This is added to test encryption and decryption
#-------------------------------------------------------------
# (this is just test, ideally we should encrypt passwords)
# To encrypt : POST http://192.168.1.5:8012/encrypt
#               (In Plain text) some-text-to-encrypt
# To decrypt : POST http://192.168.1.5:8012/decrypt
#               (In Plain text) encrypted-text
# Note:
#   http://192.168.1.5:8012 is the config server url
#
#-------------------------------------------------------------
#custom.some.property.to.test.encryption=encryptMePlease
# Note: The prefixed {cipher} allows Spring to recognize encrypted properties.
# keyword is referred in controller class
custom.encrypted.value="{cipher}0a112771dcc942727dbfde9a749fc4e17cef154d097fe84afd9e82c09d3ce718"

